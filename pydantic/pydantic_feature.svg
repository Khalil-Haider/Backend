<svg viewBox="0 0 1600 2400" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <!-- Gradients for different sections -->
    <linearGradient id="headerGrad" x1="0%" y1="0%" x2="100%" y2="0%">
      <stop offset="0%" style="stop-color:#667eea;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#764ba2;stop-opacity:1" />
    </linearGradient>
    
    <linearGradient id="baseModelGrad" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#4facfe;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#00f2fe;stop-opacity:1" />
    </linearGradient>
    
    <linearGradient id="validationGrad" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#43e97b;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#38f9d7;stop-opacity:1" />
    </linearGradient>
    
    <linearGradient id="fieldGrad" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#fa709a;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#fee140;stop-opacity:1" />
    </linearGradient>
    
    <linearGradient id="constraintsGrad" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#a8edea;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#fed6e3;stop-opacity:1" />
    </linearGradient>
    
    <linearGradient id="annotatedGrad" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#ff9a9e;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#fecfef;stop-opacity:1" />
    </linearGradient>
    
    <linearGradient id="strictGrad" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#ffecd2;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#fcb69f;stop-opacity:1" />
    </linearGradient>
    
    <!-- Shadow filter -->
    <filter id="shadow" x="-20%" y="-20%" width="140%" height="140%">
      <feDropShadow dx="2" dy="4" stdDeviation="3" flood-color="#00000020"/>
    </filter>
    
    <!-- Code background -->
    <pattern id="codePattern" patternUnits="userSpaceOnUse" width="20" height="20">
      <rect width="20" height="20" fill="#080809ff"/>
      <circle cx="2" cy="2" r="0.5" fill="#040608ff"/>
    </pattern>
  </defs>

  <!-- Header Section -->
  <rect x="0" y="0" width="1600" height="120" fill="url(#headerGrad)" filter="url(#shadow)"/>
  <text x="800" y="45" font-family="Arial, sans-serif" font-size="36" font-weight="bold" text-anchor="middle" fill="white">
    üêç PYDANTIC COMPLETE FEATURE GUIDE
  </text>
  <text x="800" y="80" font-family="Arial, sans-serif" font-size="18" text-anchor="middle" fill="white" opacity="0.9">
    Professional Data Validation &amp; Settings Management Using Python Type Annotations
  </text>

  <!-- BaseModel Section -->
  <g transform="translate(20, 140)">
    <rect x="0" y="0" width="760" height="400" rx="15" fill="url(#baseModelGrad)" opacity="0.1" filter="url(#shadow)"/>
    <rect x="10" y="10" width="740" height="50" rx="25" fill="url(#baseModelGrad)"/>
    <text x="380" y="40" font-family="Arial, sans-serif" font-size="24" font-weight="bold" text-anchor="middle" fill="white">
      üìã BaseModel &amp; Type Validation
    </text>
    
    <!-- Feature descriptions -->
    <text x="30" y="90" font-family="Arial, sans-serif" font-size="16" font-weight="bold" fill="#2d3748">
      ‚ú® Smart Type Conversion:
    </text>
    <text x="30" y="115" font-family="Arial, sans-serif" font-size="14" fill="#4a5568">
      ‚Ä¢ Automatically converts compatible types (int("30") ‚úÖ, int("thirty") ‚ùå)
    </text>
    <text x="30" y="135" font-family="Arial, sans-serif" font-size="14" fill="#4a5568">
      ‚Ä¢ Validates data structure on instantiation
    </text>
    
    <!-- Code example -->
    <rect x="30" y="150" width="700" height="220" rx="8" fill="url(#codePattern)" stroke="#070808ff" stroke-width="1"/>
    <text x="45" y="175" font-family="Monaco, monospace" font-size="12" fill="#2d3748" font-weight="bold">
      from pydantic import BaseModel
    </text>
    <text x="45" y="195" font-family="Monaco, monospace" font-size="12" fill="#2d3748">
      from typing import Optional
    </text>
    <text x="45" y="220" font-family="Monaco, monospace" font-size="12" fill="#e53e3e" font-weight="bold">
      class User(BaseModel):
    </text>
    <text x="65" y="240" font-family="Monaco, monospace" font-size="12" fill="#2b6cb0">
      name: str
    </text>
    <text x="65" y="260" font-family="Monaco, monospace" font-size="12" fill="#2b6cb0">
      age: int = 30  # Default value
    </text>
    <text x="65" y="280" font-family="Monaco, monospace" font-size="12" fill="#2b6cb0">
      email: Optional[str] = None
    </text>
    <text x="45" y="305" font-family="Monaco, monospace" font-size="12" fill="#38a169">
      # Works: User(name="John", age="25") ‚Üí age becomes int(25)
    </text>
    <text x="45" y="325" font-family="Monaco, monospace" font-size="12" fill="#e53e3e">
      # Fails: User(name="John", age="twenty-five") ‚Üí ValidationError
    </text>
    <text x="45" y="345" font-family="Monaco, monospace" font-size="12" fill="#805ad5">
      user = User(name="Alice", age="30")  # ‚úÖ Success
    </text>
  </g>

  <!-- Built-in Validation Section -->
  <g transform="translate(800, 140)">
    <rect x="0" y="0" width="780" height="400" rx="15" fill="url(#validationGrad)" opacity="0.1" filter="url(#shadow)"/>
    <rect x="10" y="10" width="760" height="50" rx="25" fill="url(#validationGrad)"/>
    <text x="390" y="40" font-family="Arial, sans-serif" font-size="24" font-weight="bold" text-anchor="middle" fill="white">
      ‚úÖ Built-in Validation Types
    </text>
    
    <text x="30" y="90" font-family="Arial, sans-serif" font-size="16" font-weight="bold" fill="#2d3748">
      üîê Email, URL, and Special Types:
    </text>
    <text x="30" y="115" font-family="Arial, sans-serif" font-size="14" fill="#4a5568">
      ‚Ä¢ EmailStr, HttpUrl, UUID4, datetime validation
    </text>
    
    <!-- Code example -->
    <rect x="30" y="135" width="720" height="235" rx="8" fill="url(#codePattern)" stroke="#e2e8f0" stroke-width="1"/>
    <text x="45" y="160" font-family="Monaco, monospace" font-size="12" fill="#2d3748" font-weight="bold">
      from pydantic import BaseModel, EmailStr, HttpUrl
    </text>
    <text x="45" y="180" font-family="Monaco, monospace" font-size="12" fill="#2d3748" font-weight="bold">
      from datetime import datetime
    </text>
    <text x="45" y="205" font-family="Monaco, monospace" font-size="12" fill="#e53e3e" font-weight="bold">
      class Profile(BaseModel):
    </text>
    <text x="65" y="225" font-family="Monaco, monospace" font-size="12" fill="#2b6cb0">
      email: EmailStr  # Auto validates email format
    </text>
    <text x="65" y="245" font-family="Monaco, monospace" font-size="12" fill="#2b6cb0">
      website: HttpUrl  # Validates URLs
    </text>
    <text x="65" y="265" font-family="Monaco, monospace" font-size="12" fill="#2b6cb0">
      created_at: datetime  # Parses ISO strings
    </text>
    <text x="45" y="290" font-family="Monaco, monospace" font-size="12" fill="#38a169">
      # ‚úÖ Valid: EmailStr validates "user@domain.com"
    </text>
    <text x="45" y="310" font-family="Monaco, monospace" font-size="12" fill="#e53e3e">
      # ‚ùå Invalid: EmailStr rejects "invalid-email"
    </text>
    <text x="45" y="330" font-family="Monaco, monospace" font-size="12" fill="#805ad5">
      profile = Profile(email="john@example.com", ...)
    </text>
    <text x="45" y="350" font-family="Monaco, monospace" font-size="12" fill="#718096">
      # Auto-conversion: "2023-01-01" ‚Üí datetime object
    </text>
  </g>

  <!-- Field Function Section -->
  <g transform="translate(20, 560)">
    <rect x="0" y="0" width="760" height="450" rx="15" fill="url(#fieldGrad)" opacity="0.1" filter="url(#shadow)"/>
    <rect x="10" y="10" width="740" height="50" rx="25" fill="url(#fieldGrad)"/>
    <text x="380" y="40" font-family="Arial, sans-serif" font-size="24" font-weight="bold" text-anchor="middle" fill="white">
      üè∑Ô∏è Field() Function Features
    </text>
    
    <text x="30" y="90" font-family="Arial, sans-serif" font-size="16" font-weight="bold" fill="#2d3748">
      üìù Metadata &amp; Documentation:
    </text>
    <text x="30" y="115" font-family="Arial, sans-serif" font-size="14" fill="#4a5568">
      ‚Ä¢ Add descriptions, examples, titles to fields
    </text>
    <text x="30" y="135" font-family="Arial, sans-serif" font-size="14" fill="#4a5568">
      ‚Ä¢ Generate automatic JSON schema documentation
    </text>
    
    <!-- Code example -->
    <rect x="30" y="155" width="700" height="275" rx="8" fill="url(#codePattern)" stroke="#e2e8f0" stroke-width="1"/>
    <text x="45" y="180" font-family="Monaco, monospace" font-size="12" fill="#2d3748" font-weight="bold">
      from pydantic import BaseModel, Field
    </text>
    <text x="45" y="205" font-family="Monaco, monospace" font-size="12" fill="#e53e3e" font-weight="bold">
      class Product(BaseModel):
    </text>
    <text x="65" y="225" font-family="Monaco, monospace" font-size="12" fill="#2b6cb0">
      name: str = Field(..., 
    </text>
    <text x="85" y="245" font-family="Monaco, monospace" font-size="12" fill="#2b6cb0">
      description="Product name",
    </text>
    <text x="85" y="265" font-family="Monaco, monospace" font-size="12" fill="#2b6cb0">
      min_length=1, max_length=100)
    </text>
    <text x="65" y="285" font-family="Monaco, monospace" font-size="12" fill="#2b6cb0">
      price: float = Field(gt=0, 
    </text>
    <text x="85" y="305" font-family="Monaco, monospace" font-size="12" fill="#2b6cb0">
      description="Price in USD",
    </text>
    <text x="85" y="325" font-family="Monaco, monospace" font-size="12" fill="#2b6cb0">
      example=99.99)
    </text>
    <text x="65" y="345" font-family="Monaco, monospace" font-size="12" fill="#2b6cb0">
      discount: float = Field(default=0.0, ge=0, le=1,
    </text>
    <text x="85" y="365" font-family="Monaco, monospace" font-size="12" fill="#2b6cb0">
      description="Discount percentage")
    </text>
    <text x="45" y="390" font-family="Monaco, monospace" font-size="12" fill="#38a169">
      # Field(...) = required field with metadata
    </text>
    <text x="45" y="410" font-family="Monaco, monospace" font-size="12" fill="#718096">
      # Generates rich JSON schema automatically
    </text>
  </g>

  <!-- Numeric Constraints Section -->
  <g transform="translate(800, 560)">
    <rect x="0" y="0" width="780" height="450" rx="15" fill="url(#constraintsGrad)" opacity="0.1" filter="url(#shadow)"/>
    <rect x="10" y="10" width="760" height="50" rx="25" fill="url(#constraintsGrad)"/>
    <text x="390" y="40" font-family="Arial, sans-serif" font-size="24" font-weight="bold" text-anchor="middle" fill="white">
      üî¢ Numeric &amp; String Constraints
    </text>
    
    <text x="30" y="90" font-family="Arial, sans-serif" font-size="16" font-weight="bold" fill="#2d3748">
      üìä Powerful Validation Rules:
    </text>
    <text x="30" y="115" font-family="Arial, sans-serif" font-size="14" fill="#4a5568">
      ‚Ä¢ gt/ge/lt/le for number ranges, regex for strings
    </text>
    
    <!-- Code example -->
    <rect x="30" y="135" width="720" height="295" rx="8" fill="url(#codePattern)" stroke="#e2e8f0" stroke-width="1"/>
    <text x="45" y="160" font-family="Monaco, monospace" font-size="12" fill="#2d3748" font-weight="bold">
      from pydantic import BaseModel, Field
    </text>
    <text x="45" y="180" font-family="Monaco, monospace" font-size="12" fill="#2d3748" font-weight="bold">
      from decimal import Decimal
    </text>
    <text x="45" y="205" font-family="Monaco, monospace" font-size="12" fill="#e53e3e" font-weight="bold">
      class Order(BaseModel):
    </text>
    <text x="65" y="225" font-family="Monaco, monospace" font-size="12" fill="#38a169">
      # Numeric constraints
    </text>
    <text x="65" y="245" font-family="Monaco, monospace" font-size="12" fill="#2b6cb0">
      quantity: int = Field(gt=0, le=1000)  # 1-1000
    </text>
    <text x="65" y="265" font-family="Monaco, monospace" font-size="12" fill="#2b6cb0">
      total: float = Field(ge=0.01, multiple_of=0.01)
    </text>
    <text x="65" y="285" font-family="Monaco, monospace" font-size="12" fill="#38a169">
      # String constraints
    </text>
    <text x="65" y="305" font-family="Monaco, monospace" font-size="12" fill="#2b6cb0">
      order_id: str = Field(min_length=5, max_length=20,
    </text>
    <text x="85" y="325" font-family="Monaco, monospace" font-size="12" fill="#2b6cb0">
      pattern=r'^ORD-\d+$')  # ORD-12345 format
    </text>
    <text x="65" y="345" font-family="Monaco, monospace" font-size="12" fill="#38a169">
      # Decimal precision
    </text>
    <text x="65" y="365" font-family="Monaco, monospace" font-size="12" fill="#2b6cb0">
      price: Decimal = Field(max_digits=10, decimal_places=2)
    </text>
    <text x="45" y="390" font-family="Monaco, monospace" font-size="12" fill="#e53e3e">
      # gt=greater than, ge=greater equal, lt/le similar
    </text>
    <text x="45" y="410" font-family="Monaco, monospace" font-size="12" fill="#805ad5">
      order = Order(quantity=5, total=99.99, order_id="ORD-001")
    </text>
  </g>

  <!-- Annotated Section -->
  <g transform="translate(20, 1030)">
    <rect x="0" y="0" width="760" height="480" rx="15" fill="url(#annotatedGrad)" opacity="0.1" filter="url(#shadow)"/>
    <rect x="10" y="10" width="740" height="50" rx="25" fill="url(#annotatedGrad)"/>
    <text x="380" y="40" font-family="Arial, sans-serif" font-size="24" font-weight="bold" text-anchor="middle" fill="white">
      üè∑Ô∏è Annotated Types &amp; Compound Validation
    </text>
    
    <text x="30" y="90" font-family="Arial, sans-serif" font-size="16" font-weight="bold" fill="#2d3748">
      üîó Advanced Type Annotations:
    </text>
    <text x="30" y="115" font-family="Arial, sans-serif" font-size="14" fill="#4a5568">
      ‚Ä¢ Apply constraints to list/dict items, reusable type aliases
    </text>
    
    <!-- Code example -->
    <rect x="30" y="135" width="700" height="325" rx="8" fill="url(#codePattern)" stroke="#e2e8f0" stroke-width="1"/>
    <text x="45" y="160" font-family="Monaco, monospace" font-size="12" fill="#2d3748" font-weight="bold">
      from typing import Annotated, List
    </text>
    <text x="45" y="180" font-family="Monaco, monospace" font-size="12" fill="#2d3748" font-weight="bold">
      from pydantic import BaseModel, Field
    </text>
    <text x="45" y="205" font-family="Monaco, monospace" font-size="12" fill="#38a169">
      # Reusable type aliases
    </text>
    <text x="45" y="225" font-family="Monaco, monospace" font-size="12" fill="#805ad5" font-weight="bold">
      Score = Annotated[int, Field(ge=0, le=100)]
    </text>
    <text x="45" y="245" font-family="Monaco, monospace" font-size="12" fill="#805ad5" font-weight="bold">
      Name = Annotated[str, Field(min_length=2, max_length=50)]
    </text>
    <text x="45" y="270" font-family="Monaco, monospace" font-size="12" fill="#e53e3e" font-weight="bold">
      class Student(BaseModel):
    </text>
    <text x="65" y="290" font-family="Monaco, monospace" font-size="12" fill="#2b6cb0">
      name: Name  # Uses alias validation
    </text>
    <text x="65" y="310" font-family="Monaco, monospace" font-size="12" fill="#2b6cb0">
      scores: List[Score]  # Each item 0-100
    </text>
    <text x="65" y="330" font-family="Monaco, monospace" font-size="12" fill="#2b6cb0">
      subjects: Annotated[List[str], 
    </text>
    <text x="85" y="350" font-family="Monaco, monospace" font-size="12" fill="#2b6cb0">
      Field(min_items=1, max_items=10)]
    </text>
    <text x="45" y="375" font-family="Monaco, monospace" font-size="12" fill="#38a169">
      # Validates: each score 0-100, name length, list size
    </text>
    <text x="45" y="395" font-family="Monaco, monospace" font-size="12" fill="#805ad5">
      student = Student(name="Alice", scores=[95, 87, 92],
    </text>
    <text x="120" y="415" font-family="Monaco, monospace" font-size="12" fill="#805ad5">
      subjects=["Math", "Science"])
    </text>
    <text x="45" y="440" font-family="Monaco, monospace" font-size="12" fill="#e53e3e">
      # ‚ùå Fails if any score > 100 or name too short
    </text>
  </g>

  <!-- Strict vs Lax Mode Section -->
  <g transform="translate(800, 1030)">
    <rect x="0" y="0" width="780" height="480" rx="15" fill="url(#strictGrad)" opacity="0.1" filter="url(#shadow)"/>
    <rect x="10" y="10" width="760" height="50" rx="25" fill="url(#strictGrad)"/>
    <text x="390" y="40" font-family="Arial, sans-serif" font-size="24" font-weight="bold" text-anchor="middle" fill="white">
      ‚ö° Strict vs Lax Mode
    </text>
    
    <text x="30" y="90" font-family="Arial, sans-serif" font-size="16" font-weight="bold" fill="#2d3748">
      üéØ Control Type Coercion:
    </text>
    <text x="30" y="115" font-family="Arial, sans-serif" font-size="14" fill="#4a5568">
      ‚Ä¢ Strict: No conversion, Lax: Smart conversion
    </text>
    
    <!-- Use cases -->
    <rect x="30" y="135" width="340" height="140" rx="8" fill="#fef5e7" stroke="#f6ad55" stroke-width="1"/>
    <text x="40" y="155" font-family="Arial, sans-serif" font-size="14" font-weight="bold" fill="#c05621">
      ‚ö° Use Strict Mode For:
    </text>
    <text x="40" y="175" font-family="Arial, sans-serif" font-size="12" fill="#9c4221">
      ‚Ä¢ APIs requiring exact types
    </text>
    <text x="40" y="195" font-family="Arial, sans-serif" font-size="12" fill="#9c4221">
      ‚Ä¢ Financial data processing
    </text>
    <text x="40" y="215" font-family="Arial, sans-serif" font-size="12" fill="#9c4221">
      ‚Ä¢ Configuration parsing
    </text>
    <text x="40" y="235" font-family="Arial, sans-serif" font-size="12" fill="#9c4221">
      ‚Ä¢ Early error detection
    </text>
    <text x="40" y="255" font-family="Arial, sans-serif" font-size="12" fill="#9c4221">
      ‚Ä¢ Critical type safety
    </text>

    <rect x="390" y="135" width="340" height="140" rx="8" fill="#f0fff4" stroke="#68d391" stroke-width="1"/>
    <text x="400" y="155" font-family="Arial, sans-serif" font-size="14" font-weight="bold" fill="#276749">
      üîÑ Use Lax Mode For:
    </text>
    <text x="400" y="175" font-family="Arial, sans-serif" font-size="12" fill="#2f855a">
      ‚Ä¢ User input processing
    </text>
    <text x="400" y="195" font-family="Arial, sans-serif" font-size="12" fill="#2f855a">
      ‚Ä¢ Database/file reading
    </text>
    <text x="400" y="215" font-family="Arial, sans-serif" font-size="12" fill="#2f855a">
      ‚Ä¢ External API integration
    </text>
    <text x="400" y="235" font-family="Arial, sans-serif" font-size="12" fill="#2f855a">
      ‚Ä¢ Form data handling
    </text>
    <text x="400" y="255" font-family="Arial, sans-serif" font-size="12" fill="#2f855a">
      ‚Ä¢ Flexible data sources
    </text>
    
    <!-- Code example -->
    <rect x="30" y="290" width="720" height="170" rx="8" fill="url(#codePattern)" stroke="#e2e8f0" stroke-width="1"/>
    <text x="45" y="315" font-family="Monaco, monospace" font-size="12" fill="#2d3748" font-weight="bold">
      from pydantic import BaseModel, Field, ConfigDict
    </text>
    <text x="45" y="340" font-family="Monaco, monospace" font-size="12" fill="#e53e3e" font-weight="bold">
      class StrictModel(BaseModel):
    </text>
    <text x="65" y="360" font-family="Monaco, monospace" font-size="12" fill="#805ad5">
      model_config = ConfigDict(strict=True)
    </text>
    <text x="65" y="380" font-family="Monaco, monospace" font-size="12" fill="#2b6cb0">
      age: int
    </text>
    <text x="45" y="405" font-family="Monaco, monospace" font-size="12" fill="#38a169">
      # Strict: StrictModel(age="25") ‚Üí ‚ùå ValidationError
    </text>
    <text x="45" y="425" font-family="Monaco, monospace" font-size="12" fill="#38a169">
      # Lax: BaseModel(age="25") ‚Üí ‚úÖ Converts to int(25)
    </text>
    <text x="45" y="445" font-family="Monaco, monospace" font-size="12" fill="#e53e3e">
      strict_user = StrictModel(age=25)  # Must be int, not str
    </text>
  </g>

  <!-- Advanced Features Section -->
  <g transform="translate(20, 1530)">
    <rect x="0" y="0" width="1560" height="320" rx="15" fill="linear-gradient(135deg, #667eea 0%, #764ba2 100%)" opacity="0.1" filter="url(#shadow)"/>
    <rect x="10" y="10" width="1540" height="50" rx="25" fill="linear-gradient(135deg, #667eea 0%, #764ba2 100%)"/>
    <text x="790" y="40" font-family="Arial, sans-serif" font-size="24" font-weight="bold" text-anchor="middle" fill="white">
      üöÄ Advanced Pydantic Features Overview
    </text>
    
    <!-- Three column layout for advanced features -->
    <g transform="translate(30, 80)">
      <!-- Column 1: Custom Validators -->
      <rect x="0" y="0" width="480" height="220" rx="8" fill="#0b0808ff" stroke="#e2e8f0" stroke-width="1" filter="url(#shadow)"/>
      <text x="240" y="25" font-family="Arial, sans-serif" font-size="16" font-weight="bold" text-anchor="middle" fill="#2d3748">
        üîß Custom Validators &amp; Computed Fields
      </text>
      <text x="20" y="50" font-family="Monaco, monospace" font-size="11" fill="#2b6cb0">
        @field_validator('email')
      </text>
      <text x="20" y="70" font-family="Monaco, monospace" font-size="11" fill="#2b6cb0">
        @classmethod
      </text>
      <text x="20" y="90" font-family="Monaco, monospace" font-size="11" fill="#2b6cb0">
        def validate_email(cls, v):
      </text>
      <text x="40" y="110" font-family="Monaco, monospace" font-size="11" fill="#2b6cb0">
        if '@' not in v: raise ValueError()
      </text>
      <text x="40" y="130" font-family="Monaco, monospace" font-size="11" fill="#2b6cb0">
        return v.lower()
      </text>
      <text x="20" y="155" font-family="Monaco, monospace" font-size="11" fill="#805ad5">
        @computed_field
      </text>
      <text x="20" y="175" font-family="Monaco, monospace" font-size="11" fill="#805ad5">
        @property
      </text>
      <text x="20" y="195" font-family="Monaco, monospace" font-size="11" fill="#805ad5">
        def full_name(self) -> str:
      </text>
      <text x="40" y="215" font-family="Monaco, monospace" font-size="11" fill="#805ad5">
        return f"{self.first} {self.last}"
      </text>
    </g>
    
    <!-- Column 2: Model Configuration -->
    <g transform="translate(510, 80)">
      <rect x="0" y="0" width="520" height="220" rx="8" fill="#0a0a0aff" stroke="#e2e8f0" stroke-width="1" filter="url(#shadow)"/>
      <text x="260" y="25" font-family="Arial, sans-serif" font-size="16" font-weight="bold" text-anchor="middle" fill="#2d3748">
        ‚öôÔ∏è Model Configuration &amp; Settings
      </text>
      <text x="20" y="50" font-family="Monaco, monospace" font-size="11" fill="#e53e3e">
        class Settings(BaseModel):
      </text>
      <text x="40" y="70" font-family="Monaco, monospace" font-size="11" fill="#805ad5">
        model_config = ConfigDict(
      </text>
      <text x="60" y="90" font-family="Monaco, monospace" font-size="11" fill="#2b6cb0">
        alias_generator=AliasGenerator(
      </text>
      <text x="80" y="110" font-family="Monaco, monospace" font-size="11" fill="#2b6cb0">
        alias=to_camel),  # snake_case ‚Üí camelCase
      </text>
      <text x="60" y="130" font-family="Monaco, monospace" font-size="11" fill="#2b6cb0">
        populate_by_name=True,  # Accept both formats
      </text>
      <text x="60" y="150" font-family="Monaco, monospace" font-size="11" fill="#2b6cb0">
        validate_default=True,  # Validate defaults
      </text>
      <text x="60" y="170" font-family="Monaco, monospace" font-size="11" fill="#2b6cb0">
        frozen=True  # Immutable after creation
      </text>
      <text x="40" y="190" font-family="Monaco, monospace" font-size="11" fill="#805ad5">
        )
      </text>
      <text x="20" y="215" font-family="Monaco, monospace" font-size="11" fill="#38a169">
        # Converts field names automatically
      </text>
    </g>
    
    <!-- Column 3: Serialization -->
    <g transform="translate(1050, 80)">
      <rect x="0" y="0" width="480" height="220" rx="8" fill="#0b0a0aff" stroke="#e2e8f0" stroke-width="1" filter="url(#shadow)"/>
      <text x="240" y="25" font-family="Arial, sans-serif" font-size="16" font-weight="bold" text-anchor="middle" fill="#2d3748">
        üì§ Serialization &amp; Export Options
      </text>
      <text x="20" y="50" font-family="Monaco, monospace" font-size="11" fill="#38a169">
        # Multiple export formats
      </text>
      <text x="20" y="70" font-family="Monaco, monospace" font-size="11" fill="#2b6cb0">
        user.model_dump()  # ‚Üí Dict
      </text>
      <text x="20" y="90" font-family="Monaco, monospace" font-size="11" fill="#2b6cb0">
        user.model_dump_json()  # ‚Üí JSON str
      </text>
      <text x="20" y="110" font-family="Monaco, monospace" font-size="11" fill="#2b6cb0">
        user.model_dump(by_alias=True)
      </text>
      <text x="20" y="135" font-family="Monaco, monospace" font-size="11" fill="#805ad5">
        # Exclude/include specific fields
      </text>
      <text x="20" y="155" font-family="Monaco, monospace" font-size="11" fill="#2b6cb0">
        user.model_dump(exclude={'password'})
      </text>
      <text x="20" y="175" font-family="Monaco, monospace" font-size="11" fill="#2b6cb0">
        user.model_dump(include={'name', 'email'})
      </text>
      <text x="20" y="200" font-family="Monaco, monospace" font-size="11" fill="#38a169">
        # Schema generation for APIs
      </text>
      <text x="20" y="220" font-family="Monaco, monospace" font-size="11" fill="#805ad5">
        User.model_json_schema()
      </text>
    </g>
  </g>

  <!-- Best Practices Section -->
  <g transform="translate(20, 1870)">
    <rect x="0" y="0" width="1560" height="280" rx="15" fill="linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)" opacity="0.1" filter="url(#shadow)"/>
    <rect x="10" y="10" width="1540" height="50" rx="25" fill="linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"/>
    <text x="790" y="40" font-family="Arial, sans-serif" font-size="24" font-weight="bold" text-anchor="middle" fill="white">
      üí° Pydantic Best Practices &amp; Pro Tips
    </text>
    
    <!-- Two column layout for best practices -->
    <g transform="translate(30, 80)">
      <!-- Left column: Performance Tips -->
      <rect x="0" y="0" width="740" height="170" rx="8" fill="#080909ff" stroke="#cbd5e0" stroke-width="1"/>
      <text x="20" y="25" font-family="Arial, sans-serif" font-size="16" font-weight="bold" fill="#2d3748">
        üöÄ Performance &amp; Memory Optimization
      </text>
      <text x="20" y="50" font-family="Arial, sans-serif" font-size="13" fill="#4a5568">
        ‚Ä¢ Use <span font-family="Monaco, monospace" fill="#805ad5">__slots__ = True</span> in ConfigDict for memory efficiency
      </text>
      <text x="20" y="70" font-family="Arial, sans-serif" font-size="13" fill="#4a5568">
        ‚Ä¢ Enable <span font-family="Monaco, monospace" fill="#805ad5">defer_build=True</span> for faster startup with large schemas
      </text>
      <text x="20" y="90" font-family="Arial, sans-serif" font-size="13" fill="#4a5568">
        ‚Ä¢ Use <span font-family="Monaco, monospace" fill="#805ad5">Union</span> types sparingly - they slow validation
      </text>
      <text x="20" y="110" font-family="Arial, sans-serif" font-size="13" fill="#4a5568">
        ‚Ä¢ Prefer <span font-family="Monaco, monospace" fill="#805ad5">Literal</span> over Enum for simple string choices
      </text>
      <text x="20" y="130" font-family="Arial, sans-serif" font-size="13" fill="#4a5568">
        ‚Ä¢ Use <span font-family="Monaco, monospace" fill="#805ad5">model_validate</span> instead of parsing for known data types
      </text>
      <text x="20" y="150" font-family="Arial, sans-serif" font-size="13" fill="#4a5568">
        ‚Ä¢ Cache compiled validators with <span font-family="Monaco, monospace" fill="#805ad5">@lru_cache</span> for repeated use
      </text>
    </g>
    
    <!-- Right column: Development Tips -->
    <g transform="translate(790, 80)">
      <rect x="0" y="0" width="740" height="170" rx="8" fill="#0c0c0bff" stroke="#fbd38d" stroke-width="1"/>
      <text x="20" y="25" font-family="Arial, sans-serif" font-size="16" font-weight="bold" fill="#2d3748">
        üîß Development &amp; Debugging Best Practices
      </text>
      <text x="20" y="50" font-family="Arial, sans-serif" font-size="13" fill="#4a5568">
        ‚Ä¢ Always handle <span font-family="Monaco, monospace" fill="#e53e3e">ValidationError</span> exceptions in production
      </text>
      <text x="20" y="70" font-family="Arial, sans-serif" font-size="13" fill="#4a5568">
        ‚Ä¢ Use descriptive field names and add documentation via Field()
      </text>
      <text x="20" y="90" font-family="Arial, sans-serif" font-size="13" fill="#4a5568">
        ‚Ä¢ Create type aliases with <span font-family="Monaco, monospace" fill="#805ad5">Annotated</span> for reusable constraints
      </text>
      <text x="20" y="110" font-family="Arial, sans-serif" font-size="13" fill="#4a5568">
        ‚Ä¢ Generate OpenAPI schemas automatically with <span font-family="Monaco, monospace" fill="#805ad5">model_json_schema()</span>
      </text>
      <text x="20" y="130" font-family="Arial, sans-serif" font-size="13" fill="#4a5568">
        ‚Ä¢ Use <span font-family="Monaco, monospace" fill="#805ad5">model_dump(exclude_unset=True)</span> for PATCH operations
      </text>
      <text x="20" y="150" font-family="Arial, sans-serif" font-size="13" fill="#4a5568">
        ‚Ä¢ Test edge cases: empty strings, null values, type boundaries
      </text>
    </g>
  </g>

  <!-- Real-world Example Section -->
  <g transform="translate(20, 2170)">
    <rect x="0" y="0" width="1560" height="200" rx="15" fill="linear-gradient(135deg, #667eea 0%, #764ba2 100%)" opacity="0.1" filter="url(#shadow)"/>
    <rect x="10" y="10" width="1540" height="50" rx="25" fill="linear-gradient(135deg, #667eea 0%, #764ba2 100%)"/>
    <text x="790" y="40" font-family="Arial, sans-serif" font-size="24" font-weight="bold" text-anchor="middle" fill="white">
      üåü Complete Real-World Example: E-commerce API Model
    </text>
    
    <!-- Full example -->
    <rect x="30" y="80" width="1500" height="100" rx="8" fill="url(#codePattern)" stroke="#e2e8f0" stroke-width="1"/>
    <text x="45" y="105" font-family="Monaco, monospace" font-size="12" fill="#e53e3e" font-weight="bold">
      class OrderRequest(BaseModel):
    </text>
    <text x="65" y="125" font-family="Monaco, monospace" font-size="12" fill="#2b6cb0">
      user_id: Annotated[int, Field(gt=0, description="Customer ID")] ‚Ä¢ 
    </text>
    <text x="500" y="125" font-family="Monaco, monospace" font-size="12" fill="#2b6cb0">
      items: List[Annotated[str, Field(min_length=1)]] ‚Ä¢ 
    </text>
    <text x="900" y="125" font-family="Monaco, monospace" font-size="12" fill="#2b6cb0">
      email: EmailStr ‚Ä¢
    </text>
    <text x="65" y="145" font-family="Monaco, monospace" font-size="12" fill="#2b6cb0">
      total: Annotated[Decimal, Field(gt=0, decimal_places=2)] ‚Ä¢ 
    </text>
    <text x="500" y="145" font-family="Monaco, monospace" font-size="12" fill="#2b6cb0">
      created_at: datetime = Field(default_factory=datetime.now)
    </text>
    <text x="65" y="165" font-family="Monaco, monospace" font-size="12" fill="#38a169">
      # ‚úÖ Validates: positive IDs, non-empty items, valid email, precise decimals, auto timestamps
    </text>
  </g>

  <!-- Footer -->
  <rect x="0" y="2380" width="1600" height="20" fill="url(#headerGrad)" opacity="0.8"/>
  <text x="800" y="2395" font-family="Arial, sans-serif" font-size="12" text-anchor="middle" fill="white" opacity="0.9">
    üêç Pydantic: The most widely used data validation library for Python ‚Ä¢ Fast ‚Ä¢ Type-safe ‚Ä¢ Developer-friendly
  </text>
</svg>